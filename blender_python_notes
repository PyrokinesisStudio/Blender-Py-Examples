Blender Python API Notes

# 3D Cursor Stuff
# Get 3D Cursor location (stored as Vector type)
bpy.context.scene.cursor_location
# Make 3D Cursor the pivot point
bpy.context.space_data.pivot_point = 'CURSOR'

# Layer access
len(bpy.context.scene.layers) # returns 20
bpy.context.scene.layers[0]  # returns True / False

# Changing Modes
cmode = bpy.context.mode
cmode = 'EDIT_MESH'
cmode = 'OBJECT'
bpy.ops.object.editmode_toggle()
bpy.ops.object.mode_set(mode='OBJECT', toggle=True)

# Active Object
bpy.context.scene.objects.active  # stored as ? type
# Make object with "Cube" name active
bpy.context.scene.objects.active = bpy.data.objects["Cube"]

# Scene > Object
#   Get object's scene index (-1 if not found):
bpy.context.scene.objects.find( bpy.context.scene.objects[0].name )

# Scene > Object > Mesh > Vertices\Edges\Faces
bpy.context.scene.objects[5].data.vertices
len(bpy.context.scene.objects[5].data.vertices)
bpy.context.scene.objects[5].data.vertices[0]
bpy.context.scene.objects[5].data.vertices.data.edges[0]
bpy.context.scene.objects[5].data.vertices.data.polygons[0]
bpy.context.scene.objects[5].data.vertices[0].id_data  # object id
bpy.context.scene.objects[5].data.vertices[0].index
bpy.context.scene.objects[5].data.edges
len(bpy.context.scene.objects[5].data.edges)
bpy.context.scene.objects[5].data.edges[0]
bpy.context.scene.objects[5].data.edges[0].vertices[0]
bpy.context.scene.objects[5].data.edges[0].index
bpy.context.scene.objects[5].data.polygons
len(bpy.context.scene.objects[5].data.polygons)
bpy.context.scene.objects[5].data.polygons[0]
bpy.context.scene.objects[5].data.polygons[0].vertices[0]
bpy.context.scene.objects[5].data.polygons[5].edge_keys
bpy.context.scene.objects[5].data.polygons[0].index

# Object mode location operations
# Get world location of object 0
bpy.context.scene.objects[0].location
# Get object 0's world matrix
bpy.context.scene.objects[0].matrix_world
bpy.context.scene.objects[0].matrix_world.inverted()
bpy.data.objects[0].matrix_world
bpy.data.objects[0].matrix_world.inverted()
# convert local coordinate to world
bpy.context.scene.objects[0].matrix_world * local_co
# convert world coordinate to local
bpy.context.scene.objects[0].matrix_world.inverted() * world_co

# Mesh edit mode location operations
bpy.context.edit_object.matrix_world
bpy.context.edit_object.matrix_world.inverted()
# convert local to world
bpy.context.edit_object.matrix_world * local_co
# convert world to local
bpy.context.edit_object.matrix_world.inverted() * world_co

# Object mode select / unselect
# Select / Unselect Everything
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.select_all(action='DESELECT')
# return currently selected objects
bpy.context.selected_objects  
# return T/F if obj 0 is selected?
bpy.context.scene.objects[0].select
# Add "Cube" to Selected Objects
bpy.data.objects["Cube"].select = True
# If "Cube" is has object index 1
bpy.data.objects[1].select = True
# Select / Unselect Vertex (must be in object mode)
bpy.data.meshes['Plane.001'].vertices[6].select = False
# Select / Unselect Edges
bpy.data.meshes['Plane.001'].edge[0].select = True
bpy.data.meshes['Plane.001'].edge[0].select = False
edge_verts = bpy.data.meshes['Plane.001'].edges[0].vertices[:]
bpy.data.meshes['Plane.001'].vertices[ edge_verts[0] ].select = False
bpy.data.meshes['Plane.001'].vertices[ edge_verts[1] ].select = False


# Mesh Edit Mode
# object being edited (if in edit mode)
bpy.context.edit_object  
# BMesh
import bmesh
bm = bmesh.from_edit_mesh( bpy.context.edit_object.data )
bm.verts[0]
bm.edges[0]
bm.faces[0]
bm.verts[0].co  # vert 0 coordinate

# Mesh Edit mode: Select / Unselect
# Select / Unselect everything
bpy.ops.mesh.select_all(action='SELECT')
bpy.ops.mesh.select_all(action='DESELECT')
bm.verts[-1].select = True
bm.select_history
bm.select_history.active.co
bpy.context.scene.objects[0].select
# get list of all selected verts
selected = [v for v in bm.verts if v.select]


Scripting_General

# Move "Cube" object "-0.1" units on X axis
# first make sure only cube is selected
bpy.ops.object.select_all(action='DESELECT')
bpy.data.objects["Cube"].select = True
# Send move command to selected object ("Cube")
bpy.ops.transform.translate(value=(-0.1, 0, 0))

# Mesh editing
  * To change vertex locations in Edit Mode you must use the bmesh module
  * Exiting edit mode will dump any uncommited bmesh data, recommend leaving 
    this until the end of a loop / function call when bmesh data no longer
    is needed
  * bpy.ops does transformations based off an object's origin. Any 
    transformations using bpy.ops will have to have their calculations based 
    on origin data (local coordinates) to work as expected.
  * turning on snap after a vertex is grabbed (or during vertex creation) 
    will make so the vertex does not snap to it's base mesh
    eg: bpy.context.tool_settings.use_snap = True AFTER 
    bpy.ops.transform.translate('INVOKE_DEFAULT') means base snap FAILS
  * Axis locks are applied to the location objects are created / grabbed at

# BGL / OpenGL / BLF
for the class invoke defintion, 
  POST_PIXEL = 2D layout (eg: bgl.glVertex2f), gl font (text) works
  POST_VIEW = 3D layout (eg: bgl.glVertex3f), gl font doesn't work

#==========================================================
# Other useful Python - Blender stuff
#==========================================================

# print non-rounded Vector coordinates ( print(vec) == rounded )
print([vec])  # option 1
print((vec))  # option 2
for v in vec: print(v, end='')  # option 3

# calculate center of triangular face/polygon
pt_sum = Vector(( 0, 0, 0 ))
for i in face_verts: pt_sum += i
face_center = pt_sum / len(face_verts)

